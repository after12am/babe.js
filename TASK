https://developer.mozilla.org/ja/docs/JavaScript/Reference

[tokenizer.js]

* have to implement remain about 7.8.3 Numeric Literals
* check whether completely implemented 7.8.4 String Literals
* have to implement 7.8.5 Regular Expression Literals
* through pass keyword
* bug of calculating column postion


[parser.js]

* have to confirm to need to implement 13.2 Creating Function Objects
* give message argument to expect function
* stil not implement 12.6 Iteration Statements
* parseVariableStatement may not call from anywhere
* have to read carefully 11.1.2 Identifier Reference
* have to read carefully 7.8.3 Numeric Literals
* have to read carefully 7.8.4 String Literals
* have to implement 7.8.5 Regular Expression Literals
* have to read 7.9 Automatic Semicolon Insertion, but I think this is under tested.
* implement 11.4.3 The typeof Operator as type() function
* new MemberExpression Arguments // a[new A()]
* CallExpression // a()
* instanceof a -> instance(a)
* typeof a -> type(a)
* decide conditional expression grammer
* raise -> throw new Error("");
* if token is variable, set var identifier
* able to parse default argument like new Class(a = 2)
* extends Message function with Error
    https://developer.mozilla.org/ja/docs/JavaScript/Reference/Global_Objects/Error
    http://ja.wikibooks.org/wiki/JavaScript_%E6%A8%99%E6%BA%96%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA_Error

	
	
	[NOT DONE]
	
	* parsePropertyNameAndValueList
	* parsePropertyNameAndValueList
	* parseFunctionExpression
	* parseComment


* Message -> TypeError or like "throw new Error('Unknown expression type: ' + expr.type);"
* bug: can not parse +a
* think about except:
* ignore newline token now. but...


[build-in]

* implement build in function by reference to 8.6 Object type
* implement build in function by reference to underscore.js and python
* implement 9 Type Conversion


[after parsing]

* not have to implement 7.9.2 Examples of Automatic Semicolon Insertion
* have to read carefully 10 Execution Contexts
* have to implement undefined infinity...
